{"ast":null,"code":"import React, { isValidElement, useRef, useLayoutEffect, useEffect, cloneElement, useReducer, useState, forwardRef } from 'react';\nimport cx from 'clsx';\n\nfunction isNum(v) {\n  return typeof v === 'number' && !isNaN(v);\n}\n\nfunction isBool(v) {\n  return typeof v === 'boolean';\n}\n\nfunction isStr(v) {\n  return typeof v === 'string';\n}\n\nfunction isFn(v) {\n  return typeof v === 'function';\n}\n\nfunction parseClassName(v) {\n  return isStr(v) || isFn(v) ? v : null;\n}\n\nfunction isToastIdValid(toastId) {\n  return toastId != null;\n}\n\nfunction getAutoCloseDelay(toastAutoClose, containerAutoClose) {\n  return toastAutoClose === false || isNum(toastAutoClose) && toastAutoClose > 0 ? toastAutoClose : containerAutoClose;\n}\n\nfunction canBeRendered(content) {\n  return isValidElement(content) || isStr(content) || isFn(content) || isNum(content);\n}\n\nconst POSITION = {\n  TOP_LEFT: 'top-left',\n  TOP_RIGHT: 'top-right',\n  TOP_CENTER: 'top-center',\n  BOTTOM_LEFT: 'bottom-left',\n  BOTTOM_RIGHT: 'bottom-right',\n  BOTTOM_CENTER: 'bottom-center'\n};\nconst TYPE = {\n  INFO: 'info',\n  SUCCESS: 'success',\n  WARNING: 'warning',\n  ERROR: 'error',\n  DEFAULT: 'default'\n};\n/**\r\n * Used to collapse toast after exit animation\r\n */\n\nfunction collapseToast(node, done, duration\n/* Default.COLLAPSE_DURATION */\n) {\n  if (duration === void 0) {\n    duration = 300;\n  }\n\n  const {\n    scrollHeight,\n    style\n  } = node;\n  requestAnimationFrame(() => {\n    style.minHeight = 'initial';\n    style.height = scrollHeight + 'px';\n    style.transition = \"all \" + duration + \"ms\";\n    requestAnimationFrame(() => {\n      style.height = '0';\n      style.padding = '0';\n      style.margin = '0';\n      setTimeout(done, duration);\n    });\n  });\n}\n/**\r\n * Css animation that just work.\r\n * You could use animate.css for instance\r\n *\r\n *\r\n * ```\r\n * cssTransition({\r\n *   enter: \"animate__animated animate__bounceIn\",\r\n *   exit: \"animate__animated animate__bounceOut\"\r\n * })\r\n * ```\r\n *\r\n */\n\n\nfunction cssTransition(_ref) {\n  let {\n    enter,\n    exit,\n    appendPosition = false,\n    collapse = true,\n    collapseDuration = 300\n    /* Default.COLLAPSE_DURATION */\n\n  } = _ref;\n  return function ToastTransition(_ref2) {\n    let {\n      children,\n      position,\n      preventExitTransition,\n      done,\n      nodeRef,\n      isIn\n    } = _ref2;\n    const enterClassName = appendPosition ? enter + \"--\" + position : enter;\n    const exitClassName = appendPosition ? exit + \"--\" + position : exit;\n    const animationStep = useRef(0\n    /* AnimationStep.Enter */\n    );\n    useLayoutEffect(() => {\n      const node = nodeRef.current;\n      const classToToken = enterClassName.split(' ');\n\n      const onEntered = e => {\n        if (e.target !== nodeRef.current) return;\n        node.dispatchEvent(new Event(\"d\"\n        /* SyntheticEvent.ENTRANCE_ANIMATION_END */\n        ));\n        node.removeEventListener('animationend', onEntered);\n        node.removeEventListener('animationcancel', onEntered);\n\n        if (animationStep.current === 0\n        /* AnimationStep.Enter */\n        && e.type !== 'animationcancel') {\n          node.classList.remove(...classToToken);\n        }\n      };\n\n      const onEnter = () => {\n        node.classList.add(...classToToken);\n        node.addEventListener('animationend', onEntered);\n        node.addEventListener('animationcancel', onEntered);\n      };\n\n      onEnter();\n    }, []);\n    useEffect(() => {\n      const node = nodeRef.current;\n\n      const onExited = () => {\n        node.removeEventListener('animationend', onExited);\n        collapse ? collapseToast(node, done, collapseDuration) : done();\n      };\n\n      const onExit = () => {\n        animationStep.current = 1\n        /* AnimationStep.Exit */\n        ;\n        node.className += \" \" + exitClassName;\n        node.addEventListener('animationend', onExited);\n      };\n\n      if (!isIn) preventExitTransition ? onExited() : onExit();\n    }, [isIn]);\n    return React.createElement(React.Fragment, null, children);\n  };\n}\n\nfunction toToastItem(toast, status) {\n  return {\n    content: toast.content,\n    containerId: toast.props.containerId,\n    id: toast.props.toastId,\n    theme: toast.props.theme,\n    type: toast.props.type,\n    data: toast.props.data || {},\n    isLoading: toast.props.isLoading,\n    icon: toast.props.icon,\n    status\n  };\n}\n\nconst eventManager = {\n  list: new Map(),\n  emitQueue: new Map(),\n\n  on(event, callback) {\n    this.list.has(event) || this.list.set(event, []);\n    this.list.get(event).push(callback);\n    return this;\n  },\n\n  off(event, callback) {\n    if (callback) {\n      const cb = this.list.get(event).filter(cb => cb !== callback);\n      this.list.set(event, cb);\n      return this;\n    }\n\n    this.list.delete(event);\n    return this;\n  },\n\n  cancelEmit(event) {\n    const timers = this.emitQueue.get(event);\n\n    if (timers) {\n      timers.forEach(clearTimeout);\n      this.emitQueue.delete(event);\n    }\n\n    return this;\n  },\n\n  /**\r\n   * Enqueue the event at the end of the call stack\r\n   * Doing so let the user call toast as follow:\r\n   * toast('1')\r\n   * toast('2')\r\n   * toast('3')\r\n   * Without setTimemout the code above will not work\r\n   */\n  emit(event) {\n    this.list.has(event) && this.list.get(event).forEach(callback => {\n      const timer = setTimeout(() => {\n        // @ts-ignore\n        callback(...[].slice.call(arguments, 1));\n      }, 0);\n      this.emitQueue.has(event) || this.emitQueue.set(event, []);\n      this.emitQueue.get(event).push(timer);\n    });\n  }\n\n};\n\nconst Svg = _ref => {\n  let {\n    theme,\n    type,\n    ...rest\n  } = _ref;\n  return React.createElement(\"svg\", {\n    viewBox: \"0 0 24 24\",\n    width: \"100%\",\n    height: \"100%\",\n    fill: theme === 'colored' ? 'currentColor' : \"var(--toastify-icon-color-\" + type + \")\",\n    ...rest\n  });\n};\n\nfunction Warning(props) {\n  return React.createElement(Svg, { ...props\n  }, React.createElement(\"path\", {\n    d: \"M23.32 17.191L15.438 2.184C14.728.833 13.416 0 11.996 0c-1.42 0-2.733.833-3.443 2.184L.533 17.448a4.744 4.744 0 000 4.368C1.243 23.167 2.555 24 3.975 24h16.05C22.22 24 24 22.044 24 19.632c0-.904-.251-1.746-.68-2.44zm-9.622 1.46c0 1.033-.724 1.823-1.698 1.823s-1.698-.79-1.698-1.822v-.043c0-1.028.724-1.822 1.698-1.822s1.698.79 1.698 1.822v.043zm.039-12.285l-.84 8.06c-.057.581-.408.943-.897.943-.49 0-.84-.367-.896-.942l-.84-8.065c-.057-.624.25-1.095.779-1.095h1.91c.528.005.84.476.784 1.1z\"\n  }));\n}\n\nfunction Info(props) {\n  return React.createElement(Svg, { ...props\n  }, React.createElement(\"path\", {\n    d: \"M12 0a12 12 0 1012 12A12.013 12.013 0 0012 0zm.25 5a1.5 1.5 0 11-1.5 1.5 1.5 1.5 0 011.5-1.5zm2.25 13.5h-4a1 1 0 010-2h.75a.25.25 0 00.25-.25v-4.5a.25.25 0 00-.25-.25h-.75a1 1 0 010-2h1a2 2 0 012 2v4.75a.25.25 0 00.25.25h.75a1 1 0 110 2z\"\n  }));\n}\n\nfunction Success(props) {\n  return React.createElement(Svg, { ...props\n  }, React.createElement(\"path\", {\n    d: \"M12 0a12 12 0 1012 12A12.014 12.014 0 0012 0zm6.927 8.2l-6.845 9.289a1.011 1.011 0 01-1.43.188l-4.888-3.908a1 1 0 111.25-1.562l4.076 3.261 6.227-8.451a1 1 0 111.61 1.183z\"\n  }));\n}\n\nfunction Error(props) {\n  return React.createElement(Svg, { ...props\n  }, React.createElement(\"path\", {\n    d: \"M11.983 0a12.206 12.206 0 00-8.51 3.653A11.8 11.8 0 000 12.207 11.779 11.779 0 0011.8 24h.214A12.111 12.111 0 0024 11.791 11.766 11.766 0 0011.983 0zM10.5 16.542a1.476 1.476 0 011.449-1.53h.027a1.527 1.527 0 011.523 1.47 1.475 1.475 0 01-1.449 1.53h-.027a1.529 1.529 0 01-1.523-1.47zM11 12.5v-6a1 1 0 012 0v6a1 1 0 11-2 0z\"\n  }));\n}\n\nfunction Spinner() {\n  return React.createElement(\"div\", {\n    className: \"Toastify\"\n    /* Default.CSS_NAMESPACE */\n    + \"__spinner\"\n  });\n}\n\nconst Icons = {\n  info: Info,\n  warning: Warning,\n  success: Success,\n  error: Error,\n  spinner: Spinner\n};\n\nconst maybeIcon = type => type in Icons;\n\nfunction getIcon(_ref2) {\n  let {\n    theme,\n    type,\n    isLoading,\n    icon\n  } = _ref2;\n  let Icon = null;\n  const iconProps = {\n    theme,\n    type\n  };\n  if (icon === false) ;else if (isFn(icon)) {\n    Icon = icon(iconProps);\n  } else if (isValidElement(icon)) {\n    Icon = cloneElement(icon, iconProps);\n  } else if (isStr(icon) || isNum(icon)) {\n    Icon = icon;\n  } else if (isLoading) {\n    Icon = Icons.spinner();\n  } else if (maybeIcon(type)) {\n    Icon = Icons[type](iconProps);\n  }\n  return Icon;\n}\n\nfunction useToastContainer(props) {\n  const [, forceUpdate] = useReducer(x => x + 1, 0);\n  const [toastIds, setToastIds] = useState([]);\n  const containerRef = useRef(null);\n  const toastToRender = useRef(new Map()).current;\n\n  const isToastActive = id => toastIds.indexOf(id) !== -1;\n\n  const instance = useRef({\n    toastKey: 1,\n    displayedToast: 0,\n    count: 0,\n    queue: [],\n    props,\n    containerId: null,\n    isToastActive,\n    getToast: id => toastToRender.get(id)\n  }).current;\n  useEffect(() => {\n    instance.containerId = props.containerId;\n    eventManager.cancelEmit(3\n    /* Event.WillUnmount */\n    ).on(0\n    /* Event.Show */\n    , buildToast).on(1\n    /* Event.Clear */\n    , toastId => containerRef.current && removeToast(toastId)).on(5\n    /* Event.ClearWaitingQueue */\n    , clearWaitingQueue).emit(2\n    /* Event.DidMount */\n    , instance);\n    return () => {\n      toastToRender.clear();\n      eventManager.emit(3\n      /* Event.WillUnmount */\n      , instance);\n    };\n  }, []);\n  useEffect(() => {\n    instance.props = props;\n    instance.isToastActive = isToastActive;\n    instance.displayedToast = toastIds.length;\n  });\n\n  function clearWaitingQueue(_ref) {\n    let {\n      containerId\n    } = _ref;\n    const {\n      limit\n    } = instance.props;\n\n    if (limit && (!containerId || instance.containerId === containerId)) {\n      instance.count -= instance.queue.length;\n      instance.queue = [];\n    }\n  }\n\n  function removeToast(toastId) {\n    setToastIds(state => isToastIdValid(toastId) ? state.filter(id => id !== toastId) : []);\n  }\n\n  function dequeueToast() {\n    const {\n      toastContent,\n      toastProps,\n      staleId\n    } = instance.queue.shift();\n    appendToast(toastContent, toastProps, staleId);\n  }\n  /**\r\n   * check if a container is attached to the dom\r\n   * check for multi-container, build only if associated\r\n   * check for duplicate toastId if no update\r\n   */\n\n\n  function isNotValid(options) {\n    return !containerRef.current || instance.props.enableMultiContainer && options.containerId !== instance.props.containerId || toastToRender.has(options.toastId) && options.updateId == null;\n  } // this function and all the function called inside needs to rely on refs\n\n\n  function buildToast(content, _ref2) {\n    let {\n      delay,\n      staleId,\n      ...options\n    } = _ref2;\n    if (!canBeRendered(content) || isNotValid(options)) return;\n    const {\n      toastId,\n      updateId,\n      data\n    } = options;\n    const {\n      props\n    } = instance;\n\n    const closeToast = () => removeToast(toastId);\n\n    const isNotAnUpdate = updateId == null;\n    if (isNotAnUpdate) instance.count++;\n    const toastProps = {\n      toastId,\n      updateId,\n      data,\n      containerId: options.containerId,\n      isLoading: options.isLoading,\n      theme: options.theme || props.theme,\n      icon: options.icon != null ? options.icon : props.icon,\n      isIn: false,\n      key: options.key || instance.toastKey++,\n      type: options.type,\n      closeToast: closeToast,\n      closeButton: options.closeButton,\n      rtl: props.rtl,\n      position: options.position || props.position,\n      transition: options.transition || props.transition,\n      className: parseClassName(options.className || props.toastClassName),\n      bodyClassName: parseClassName(options.bodyClassName || props.bodyClassName),\n      style: options.style || props.toastStyle,\n      bodyStyle: options.bodyStyle || props.bodyStyle,\n      onClick: options.onClick || props.onClick,\n      pauseOnHover: isBool(options.pauseOnHover) ? options.pauseOnHover : props.pauseOnHover,\n      pauseOnFocusLoss: isBool(options.pauseOnFocusLoss) ? options.pauseOnFocusLoss : props.pauseOnFocusLoss,\n      draggable: isBool(options.draggable) ? options.draggable : props.draggable,\n      draggablePercent: options.draggablePercent || props.draggablePercent,\n      draggableDirection: options.draggableDirection || props.draggableDirection,\n      closeOnClick: isBool(options.closeOnClick) ? options.closeOnClick : props.closeOnClick,\n      progressClassName: parseClassName(options.progressClassName || props.progressClassName),\n      progressStyle: options.progressStyle || props.progressStyle,\n      autoClose: options.isLoading ? false : getAutoCloseDelay(options.autoClose, props.autoClose),\n      hideProgressBar: isBool(options.hideProgressBar) ? options.hideProgressBar : props.hideProgressBar,\n      progress: options.progress,\n      role: options.role || props.role,\n\n      deleteToast() {\n        const removed = toToastItem(toastToRender.get(toastId), 'removed');\n        toastToRender.delete(toastId);\n        eventManager.emit(4\n        /* Event.Change */\n        , removed);\n        const queueLen = instance.queue.length;\n        instance.count = isToastIdValid(toastId) ? instance.count - 1 : instance.count - instance.displayedToast;\n        if (instance.count < 0) instance.count = 0;\n\n        if (queueLen > 0) {\n          const freeSlot = isToastIdValid(toastId) ? 1 : instance.props.limit;\n\n          if (queueLen === 1 || freeSlot === 1) {\n            instance.displayedToast++;\n            dequeueToast();\n          } else {\n            const toDequeue = freeSlot > queueLen ? queueLen : freeSlot;\n            instance.displayedToast = toDequeue;\n\n            for (let i = 0; i < toDequeue; i++) dequeueToast();\n          }\n        } else {\n          forceUpdate();\n        }\n      }\n\n    };\n    toastProps.iconOut = getIcon(toastProps);\n    if (isFn(options.onOpen)) toastProps.onOpen = options.onOpen;\n    if (isFn(options.onClose)) toastProps.onClose = options.onClose;\n    toastProps.closeButton = props.closeButton;\n\n    if (options.closeButton === false || canBeRendered(options.closeButton)) {\n      toastProps.closeButton = options.closeButton;\n    } else if (options.closeButton === true) {\n      toastProps.closeButton = canBeRendered(props.closeButton) ? props.closeButton : true;\n    }\n\n    let toastContent = content;\n\n    if (isValidElement(content) && !isStr(content.type)) {\n      toastContent = cloneElement(content, {\n        closeToast,\n        toastProps,\n        data\n      });\n    } else if (isFn(content)) {\n      toastContent = content({\n        closeToast,\n        toastProps,\n        data\n      });\n    } // not handling limit + delay by design. Waiting for user feedback first\n\n\n    if (props.limit && props.limit > 0 && instance.count > props.limit && isNotAnUpdate) {\n      instance.queue.push({\n        toastContent,\n        toastProps,\n        staleId\n      });\n    } else if (isNum(delay)) {\n      setTimeout(() => {\n        appendToast(toastContent, toastProps, staleId);\n      }, delay);\n    } else {\n      appendToast(toastContent, toastProps, staleId);\n    }\n  }\n\n  function appendToast(content, toastProps, staleId) {\n    const {\n      toastId\n    } = toastProps;\n    if (staleId) toastToRender.delete(staleId);\n    const toast = {\n      content,\n      props: toastProps\n    };\n    toastToRender.set(toastId, toast);\n    setToastIds(state => [...state, toastId].filter(id => id !== staleId));\n    eventManager.emit(4\n    /* Event.Change */\n    , toToastItem(toast, toast.props.updateId == null ? 'added' : 'updated'));\n  }\n\n  function getToastToRender(cb) {\n    const toRender = new Map();\n    const collection = Array.from(toastToRender.values());\n    if (props.newestOnTop) collection.reverse();\n    collection.forEach(toast => {\n      const {\n        position\n      } = toast.props;\n      toRender.has(position) || toRender.set(position, []);\n      toRender.get(position).push(toast);\n    });\n    return Array.from(toRender, p => cb(p[0], p[1]));\n  }\n\n  return {\n    getToastToRender,\n    containerRef,\n    isToastActive\n  };\n}\n\nfunction getX(e) {\n  return e.targetTouches && e.targetTouches.length >= 1 ? e.targetTouches[0].clientX : e.clientX;\n}\n\nfunction getY(e) {\n  return e.targetTouches && e.targetTouches.length >= 1 ? e.targetTouches[0].clientY : e.clientY;\n}\n\nfunction useToast(props) {\n  const [isRunning, setIsRunning] = useState(false);\n  const [preventExitTransition, setPreventExitTransition] = useState(false);\n  const toastRef = useRef(null);\n  const drag = useRef({\n    start: 0,\n    x: 0,\n    y: 0,\n    delta: 0,\n    removalDistance: 0,\n    canCloseOnClick: true,\n    canDrag: false,\n    boundingRect: null,\n    didMove: false\n  }).current;\n  const syncProps = useRef(props);\n  const {\n    autoClose,\n    pauseOnHover,\n    closeToast,\n    onClick,\n    closeOnClick\n  } = props;\n  useEffect(() => {\n    syncProps.current = props;\n  });\n  useEffect(() => {\n    if (toastRef.current) toastRef.current.addEventListener(\"d\"\n    /* SyntheticEvent.ENTRANCE_ANIMATION_END */\n    , playToast, {\n      once: true\n    });\n    if (isFn(props.onOpen)) props.onOpen(isValidElement(props.children) && props.children.props);\n    return () => {\n      const props = syncProps.current;\n      if (isFn(props.onClose)) props.onClose(isValidElement(props.children) && props.children.props);\n    };\n  }, []);\n  useEffect(() => {\n    props.pauseOnFocusLoss && bindFocusEvents();\n    return () => {\n      props.pauseOnFocusLoss && unbindFocusEvents();\n    };\n  }, [props.pauseOnFocusLoss]);\n\n  function onDragStart(e) {\n    if (props.draggable) {\n      bindDragEvents();\n      const toast = toastRef.current;\n      drag.canCloseOnClick = true;\n      drag.canDrag = true;\n      drag.boundingRect = toast.getBoundingClientRect();\n      toast.style.transition = '';\n      drag.x = getX(e.nativeEvent);\n      drag.y = getY(e.nativeEvent);\n\n      if (props.draggableDirection === \"x\"\n      /* Direction.X */\n      ) {\n        drag.start = drag.x;\n        drag.removalDistance = toast.offsetWidth * (props.draggablePercent / 100);\n      } else {\n        drag.start = drag.y;\n        drag.removalDistance = toast.offsetHeight * (props.draggablePercent === 80\n        /* Default.DRAGGABLE_PERCENT */\n        ? props.draggablePercent * 1.5 : props.draggablePercent / 100);\n      }\n    }\n  }\n\n  function onDragTransitionEnd() {\n    if (drag.boundingRect) {\n      const {\n        top,\n        bottom,\n        left,\n        right\n      } = drag.boundingRect;\n\n      if (props.pauseOnHover && drag.x >= left && drag.x <= right && drag.y >= top && drag.y <= bottom) {\n        pauseToast();\n      } else {\n        playToast();\n      }\n    }\n  }\n\n  function playToast() {\n    setIsRunning(true);\n  }\n\n  function pauseToast() {\n    setIsRunning(false);\n  }\n\n  function bindFocusEvents() {\n    if (!document.hasFocus()) pauseToast();\n    window.addEventListener('focus', playToast);\n    window.addEventListener('blur', pauseToast);\n  }\n\n  function unbindFocusEvents() {\n    window.removeEventListener('focus', playToast);\n    window.removeEventListener('blur', pauseToast);\n  }\n\n  function bindDragEvents() {\n    drag.didMove = false;\n    document.addEventListener('mousemove', onDragMove);\n    document.addEventListener('mouseup', onDragEnd);\n    document.addEventListener('touchmove', onDragMove);\n    document.addEventListener('touchend', onDragEnd);\n  }\n\n  function unbindDragEvents() {\n    document.removeEventListener('mousemove', onDragMove);\n    document.removeEventListener('mouseup', onDragEnd);\n    document.removeEventListener('touchmove', onDragMove);\n    document.removeEventListener('touchend', onDragEnd);\n  }\n\n  function onDragMove(e) {\n    const toast = toastRef.current;\n\n    if (drag.canDrag && toast) {\n      drag.didMove = true;\n      if (isRunning) pauseToast();\n      drag.x = getX(e);\n      drag.y = getY(e);\n\n      if (props.draggableDirection === \"x\"\n      /* Direction.X */\n      ) {\n        drag.delta = drag.x - drag.start;\n      } else {\n        drag.delta = drag.y - drag.start;\n      } // prevent false positif during a toast click\n\n\n      if (drag.start !== drag.x) drag.canCloseOnClick = false;\n      toast.style.transform = \"translate\" + props.draggableDirection + \"(\" + drag.delta + \"px)\";\n      toast.style.opacity = \"\" + (1 - Math.abs(drag.delta / drag.removalDistance));\n    }\n  }\n\n  function onDragEnd() {\n    unbindDragEvents();\n    const toast = toastRef.current;\n\n    if (drag.canDrag && drag.didMove && toast) {\n      drag.canDrag = false;\n\n      if (Math.abs(drag.delta) > drag.removalDistance) {\n        setPreventExitTransition(true);\n        props.closeToast();\n        return;\n      }\n\n      toast.style.transition = 'transform 0.2s, opacity 0.2s';\n      toast.style.transform = \"translate\" + props.draggableDirection + \"(0)\";\n      toast.style.opacity = '1';\n    }\n  }\n\n  const eventHandlers = {\n    onMouseDown: onDragStart,\n    onTouchStart: onDragStart,\n    onMouseUp: onDragTransitionEnd,\n    onTouchEnd: onDragTransitionEnd\n  };\n\n  if (autoClose && pauseOnHover) {\n    eventHandlers.onMouseEnter = pauseToast;\n    eventHandlers.onMouseLeave = playToast;\n  } // prevent toast from closing when user drags the toast\n\n\n  if (closeOnClick) {\n    eventHandlers.onClick = e => {\n      onClick && onClick(e);\n      drag.canCloseOnClick && closeToast();\n    };\n  }\n\n  return {\n    playToast,\n    pauseToast,\n    isRunning,\n    preventExitTransition,\n    toastRef,\n    eventHandlers\n  };\n}\n\nfunction CloseButton(_ref) {\n  let {\n    closeToast,\n    theme,\n    ariaLabel = 'close'\n  } = _ref;\n  return React.createElement(\"button\", {\n    className: \"Toastify\"\n    /* Default.CSS_NAMESPACE */\n    + \"__close-button \" + \"Toastify\"\n    /* Default.CSS_NAMESPACE */\n    + \"__close-button--\" + theme,\n    type: \"button\",\n    onClick: e => {\n      e.stopPropagation();\n      closeToast(e);\n    },\n    \"aria-label\": ariaLabel\n  }, React.createElement(\"svg\", {\n    \"aria-hidden\": \"true\",\n    viewBox: \"0 0 14 16\"\n  }, React.createElement(\"path\", {\n    fillRule: \"evenodd\",\n    d: \"M7.71 8.23l3.75 3.75-1.48 1.48-3.75-3.75-3.75 3.75L1 11.98l3.75-3.75L1 4.48 2.48 3l3.75 3.75L9.98 3l1.48 1.48-3.75 3.75z\"\n  })));\n}\n\nfunction ProgressBar(_ref) {\n  let {\n    delay,\n    isRunning,\n    closeToast,\n    type,\n    hide,\n    className,\n    style: userStyle,\n    controlledProgress,\n    progress,\n    rtl,\n    isIn,\n    theme\n  } = _ref;\n  const style = { ...userStyle,\n    animationDuration: delay + \"ms\",\n    animationPlayState: isRunning ? 'running' : 'paused',\n    opacity: hide ? 0 : 1\n  };\n  if (controlledProgress) style.transform = \"scaleX(\" + progress + \")\";\n  const defaultClassName = cx(\"Toastify\"\n  /* Default.CSS_NAMESPACE */\n  + \"__progress-bar\", controlledProgress ? \"Toastify\"\n  /* Default.CSS_NAMESPACE */\n  + \"__progress-bar--controlled\" : \"Toastify\"\n  /* Default.CSS_NAMESPACE */\n  + \"__progress-bar--animated\", \"Toastify\"\n  /* Default.CSS_NAMESPACE */\n  + \"__progress-bar-theme--\" + theme, \"Toastify\"\n  /* Default.CSS_NAMESPACE */\n  + \"__progress-bar--\" + type, {\n    [\"Toastify\"\n    /* Default.CSS_NAMESPACE */\n    + \"__progress-bar--rtl\"]: rtl\n  });\n  const classNames = isFn(className) ? className({\n    rtl,\n    type,\n    defaultClassName\n  }) : cx(defaultClassName, className); // 🧐 controlledProgress is derived from progress\n  // so if controlledProgress is set\n  // it means that this is also the case for progress\n\n  const animationEvent = {\n    [controlledProgress && progress >= 1 ? 'onTransitionEnd' : 'onAnimationEnd']: controlledProgress && progress < 1 ? null : () => {\n      isIn && closeToast();\n    }\n  }; // TODO: add aria-valuenow, aria-valuemax, aria-valuemin\n\n  return React.createElement(\"div\", {\n    role: \"progressbar\",\n    \"aria-hidden\": hide ? 'true' : 'false',\n    \"aria-label\": \"notification timer\",\n    className: classNames,\n    style: style,\n    ...animationEvent\n  });\n}\n\nProgressBar.defaultProps = {\n  type: TYPE.DEFAULT,\n  hide: false\n};\n\nconst Toast = props => {\n  const {\n    isRunning,\n    preventExitTransition,\n    toastRef,\n    eventHandlers\n  } = useToast(props);\n  const {\n    closeButton,\n    children,\n    autoClose,\n    onClick,\n    type,\n    hideProgressBar,\n    closeToast,\n    transition: Transition,\n    position,\n    className,\n    style,\n    bodyClassName,\n    bodyStyle,\n    progressClassName,\n    progressStyle,\n    updateId,\n    role,\n    progress,\n    rtl,\n    toastId,\n    deleteToast,\n    isIn,\n    isLoading,\n    iconOut,\n    theme\n  } = props;\n  const defaultClassName = cx(\"Toastify\"\n  /* Default.CSS_NAMESPACE */\n  + \"__toast\", \"Toastify\"\n  /* Default.CSS_NAMESPACE */\n  + \"__toast-theme--\" + theme, \"Toastify\"\n  /* Default.CSS_NAMESPACE */\n  + \"__toast--\" + type, {\n    [\"Toastify\"\n    /* Default.CSS_NAMESPACE */\n    + \"__toast--rtl\"]: rtl\n  });\n  const cssClasses = isFn(className) ? className({\n    rtl,\n    position,\n    type,\n    defaultClassName\n  }) : cx(defaultClassName, className);\n  const isProgressControlled = !!progress;\n  const closeButtonProps = {\n    closeToast,\n    type,\n    theme\n  };\n  let Close = null;\n  if (closeButton === false) ;else if (isFn(closeButton)) {\n    Close = closeButton(closeButtonProps);\n  } else if (React.isValidElement(closeButton)) {\n    Close = React.cloneElement(closeButton, closeButtonProps);\n  } else {\n    Close = CloseButton(closeButtonProps);\n  }\n  return React.createElement(Transition, {\n    isIn: isIn,\n    done: deleteToast,\n    position: position,\n    preventExitTransition: preventExitTransition,\n    nodeRef: toastRef\n  }, React.createElement(\"div\", {\n    id: toastId,\n    onClick: onClick,\n    className: cssClasses,\n    ...eventHandlers,\n    style: style,\n    ref: toastRef\n  }, React.createElement(\"div\", { ...(isIn && {\n      role: role\n    }),\n    className: isFn(bodyClassName) ? bodyClassName({\n      type\n    }) : cx(\"Toastify\"\n    /* Default.CSS_NAMESPACE */\n    + \"__toast-body\", bodyClassName),\n    style: bodyStyle\n  }, iconOut != null && React.createElement(\"div\", {\n    className: cx(\"Toastify\"\n    /* Default.CSS_NAMESPACE */\n    + \"__toast-icon\", {\n      [\"Toastify\"\n      /* Default.CSS_NAMESPACE */\n      + \"--animate-icon \" + \"Toastify\"\n      /* Default.CSS_NAMESPACE */\n      + \"__zoom-enter\"]: !isLoading\n    })\n  }, iconOut), React.createElement(\"div\", null, children)), Close, (autoClose || isProgressControlled) && React.createElement(ProgressBar, { ...(updateId && !isProgressControlled ? {\n      key: \"pb-\" + updateId\n    } : {}),\n    rtl: rtl,\n    theme: theme,\n    delay: autoClose,\n    isRunning: isRunning,\n    isIn: isIn,\n    closeToast: closeToast,\n    hide: hideProgressBar,\n    type: type,\n    style: progressStyle,\n    className: progressClassName,\n    controlledProgress: isProgressControlled,\n    progress: progress\n  })));\n};\n\nconst Bounce = cssTransition({\n  enter: \"Toastify\"\n  /* Default.CSS_NAMESPACE */\n  + \"--animate \" + \"Toastify\"\n  /* Default.CSS_NAMESPACE */\n  + \"__bounce-enter\",\n  exit: \"Toastify\"\n  /* Default.CSS_NAMESPACE */\n  + \"--animate \" + \"Toastify\"\n  /* Default.CSS_NAMESPACE */\n  + \"__bounce-exit\",\n  appendPosition: true\n});\nconst Slide = cssTransition({\n  enter: \"Toastify\"\n  /* Default.CSS_NAMESPACE */\n  + \"--animate \" + \"Toastify\"\n  /* Default.CSS_NAMESPACE */\n  + \"__slide-enter\",\n  exit: \"Toastify\"\n  /* Default.CSS_NAMESPACE */\n  + \"--animate \" + \"Toastify\"\n  /* Default.CSS_NAMESPACE */\n  + \"__slide-exit\",\n  appendPosition: true\n});\nconst Zoom = cssTransition({\n  enter: \"Toastify\"\n  /* Default.CSS_NAMESPACE */\n  + \"--animate \" + \"Toastify\"\n  /* Default.CSS_NAMESPACE */\n  + \"__zoom-enter\",\n  exit: \"Toastify\"\n  /* Default.CSS_NAMESPACE */\n  + \"--animate \" + \"Toastify\"\n  /* Default.CSS_NAMESPACE */\n  + \"__zoom-exit\"\n});\nconst Flip = cssTransition({\n  enter: \"Toastify\"\n  /* Default.CSS_NAMESPACE */\n  + \"--animate \" + \"Toastify\"\n  /* Default.CSS_NAMESPACE */\n  + \"__flip-enter\",\n  exit: \"Toastify\"\n  /* Default.CSS_NAMESPACE */\n  + \"--animate \" + \"Toastify\"\n  /* Default.CSS_NAMESPACE */\n  + \"__flip-exit\"\n}); // https://github.com/yannickcr/eslint-plugin-react/issues/3140\n\nconst ToastContainer = forwardRef((props, ref) => {\n  const {\n    getToastToRender,\n    containerRef,\n    isToastActive\n  } = useToastContainer(props);\n  const {\n    className,\n    style,\n    rtl,\n    containerId\n  } = props;\n\n  function getClassName(position) {\n    const defaultClassName = cx(\"Toastify\"\n    /* Default.CSS_NAMESPACE */\n    + \"__toast-container\", \"Toastify\"\n    /* Default.CSS_NAMESPACE */\n    + \"__toast-container--\" + position, {\n      [\"Toastify\"\n      /* Default.CSS_NAMESPACE */\n      + \"__toast-container--rtl\"]: rtl\n    });\n    return isFn(className) ? className({\n      position,\n      rtl,\n      defaultClassName\n    }) : cx(defaultClassName, parseClassName(className));\n  }\n\n  useEffect(() => {\n    if (ref) {\n      ref.current = containerRef.current;\n    }\n  }, []);\n  return React.createElement(\"div\", {\n    ref: containerRef,\n    className: \"Toastify\"\n    /* Default.CSS_NAMESPACE */\n    ,\n    id: containerId\n  }, getToastToRender((position, toastList) => {\n    const containerStyle = !toastList.length ? { ...style,\n      pointerEvents: 'none'\n    } : { ...style\n    };\n    return React.createElement(\"div\", {\n      className: getClassName(position),\n      style: containerStyle,\n      key: \"container-\" + position\n    }, toastList.map((_ref, i) => {\n      let {\n        content,\n        props: toastProps\n      } = _ref;\n      return React.createElement(Toast, { ...toastProps,\n        isIn: isToastActive(toastProps.toastId),\n        style: { ...toastProps.style,\n          '--nth': i + 1,\n          '--len': toastList.length\n        },\n        key: \"toast-\" + toastProps.key\n      }, content);\n    }));\n  }));\n});\nToastContainer.displayName = 'ToastContainer';\nToastContainer.defaultProps = {\n  position: POSITION.TOP_RIGHT,\n  transition: Bounce,\n  rtl: false,\n  autoClose: 5000,\n  hideProgressBar: false,\n  closeButton: CloseButton,\n  pauseOnHover: true,\n  pauseOnFocusLoss: true,\n  closeOnClick: true,\n  newestOnTop: false,\n  draggable: true,\n  draggablePercent: 80\n  /* Default.DRAGGABLE_PERCENT */\n  ,\n  draggableDirection: \"x\"\n  /* Direction.X */\n  ,\n  role: 'alert',\n  theme: 'light'\n};\nlet containers = new Map();\nlet latestInstance;\nlet queue = [];\n/**\r\n * Get the toast by id, given it's in the DOM, otherwise returns null\r\n */\n\nfunction getToast(toastId, _ref) {\n  let {\n    containerId\n  } = _ref;\n  const container = containers.get(containerId || latestInstance);\n  if (!container) return null;\n  return container.getToast(toastId);\n}\n/**\r\n * Generate a random toastId\r\n */\n\n\nfunction generateToastId() {\n  return Math.random().toString(36).substring(2, 9);\n}\n/**\r\n * Generate a toastId or use the one provided\r\n */\n\n\nfunction getToastId(options) {\n  if (options && (isStr(options.toastId) || isNum(options.toastId))) {\n    return options.toastId;\n  }\n\n  return generateToastId();\n}\n/**\r\n * If the container is not mounted, the toast is enqueued and\r\n * the container lazy mounted\r\n */\n\n\nfunction dispatchToast(content, options) {\n  if (containers.size > 0) {\n    eventManager.emit(0\n    /* Event.Show */\n    , content, options);\n  } else {\n    queue.push({\n      content,\n      options\n    });\n  }\n\n  return options.toastId;\n}\n/**\r\n * Merge provided options with the defaults settings and generate the toastId\r\n */\n\n\nfunction mergeOptions(type, options) {\n  return { ...options,\n    type: options && options.type || type,\n    toastId: getToastId(options)\n  };\n}\n\nfunction createToastByType(type) {\n  return (content, options) => dispatchToast(content, mergeOptions(type, options));\n}\n\nfunction toast(content, options) {\n  return dispatchToast(content, mergeOptions(TYPE.DEFAULT, options));\n}\n\ntoast.loading = (content, options) => dispatchToast(content, mergeOptions(TYPE.DEFAULT, {\n  isLoading: true,\n  autoClose: false,\n  closeOnClick: false,\n  closeButton: false,\n  draggable: false,\n  ...options\n}));\n\nfunction handlePromise(promise, _ref2, options) {\n  let {\n    pending,\n    error,\n    success\n  } = _ref2;\n  let id;\n\n  if (pending) {\n    id = isStr(pending) ? toast.loading(pending, options) : toast.loading(pending.render, { ...options,\n      ...pending\n    });\n  }\n\n  const resetParams = {\n    isLoading: null,\n    autoClose: null,\n    closeOnClick: null,\n    closeButton: null,\n    draggable: null,\n    delay: 100\n  };\n\n  const resolver = (type, input, result) => {\n    // Remove the toast if the input has not been provided. This prevents the toast from hanging\n    // in the pending state if a success/error toast has not been provided.\n    if (input == null) {\n      toast.dismiss(id);\n      return;\n    }\n\n    const baseParams = {\n      type,\n      ...resetParams,\n      ...options,\n      data: result\n    };\n    const params = isStr(input) ? {\n      render: input\n    } : input; // if the id is set we know that it's an update\n\n    if (id) {\n      toast.update(id, { ...baseParams,\n        ...params\n      });\n    } else {\n      // using toast.promise without loading\n      toast(params.render, { ...baseParams,\n        ...params\n      });\n    }\n\n    return result;\n  };\n\n  const p = isFn(promise) ? promise() : promise; //call the resolvers only when needed\n\n  p.then(result => resolver('success', success, result)).catch(err => resolver('error', error, err));\n  return p;\n}\n\ntoast.promise = handlePromise;\ntoast.success = createToastByType(TYPE.SUCCESS);\ntoast.info = createToastByType(TYPE.INFO);\ntoast.error = createToastByType(TYPE.ERROR);\ntoast.warning = createToastByType(TYPE.WARNING);\ntoast.warn = toast.warning;\n\ntoast.dark = (content, options) => dispatchToast(content, mergeOptions(TYPE.DEFAULT, {\n  theme: 'dark',\n  ...options\n}));\n/**\r\n * Remove toast programmaticaly\r\n */\n\n\ntoast.dismiss = id => {\n  if (containers.size > 0) {\n    eventManager.emit(1\n    /* Event.Clear */\n    , id);\n  } else {\n    queue = queue.filter(t => isToastIdValid(id) && t.options.toastId !== id);\n  }\n};\n/**\r\n * Clear waiting queue when limit is used\r\n */\n\n\ntoast.clearWaitingQueue = function (params) {\n  if (params === void 0) {\n    params = {};\n  }\n\n  return eventManager.emit(5\n  /* Event.ClearWaitingQueue */\n  , params);\n};\n/**\r\n * return true if one container is displaying the toast\r\n */\n\n\ntoast.isActive = id => {\n  let isToastActive = false;\n  containers.forEach(container => {\n    if (container.isToastActive && container.isToastActive(id)) {\n      isToastActive = true;\n    }\n  });\n  return isToastActive;\n};\n\ntoast.update = function (toastId, options) {\n  if (options === void 0) {\n    options = {};\n  } // if you call toast and toast.update directly nothing will be displayed\n  // this is why I defered the update\n\n\n  setTimeout(() => {\n    const toast = getToast(toastId, options);\n\n    if (toast) {\n      const {\n        props: oldOptions,\n        content: oldContent\n      } = toast;\n      const nextOptions = { ...oldOptions,\n        ...options,\n        toastId: options.toastId || toastId,\n        updateId: generateToastId()\n      };\n      if (nextOptions.toastId !== toastId) nextOptions.staleId = toastId;\n      const content = nextOptions.render || oldContent;\n      delete nextOptions.render;\n      dispatchToast(content, nextOptions);\n    }\n  }, 0);\n};\n/**\r\n * Used for controlled progress bar.\r\n */\n\n\ntoast.done = id => {\n  toast.update(id, {\n    progress: 1\n  });\n};\n/**\r\n * Subscribe to change when a toast is added, removed and updated\r\n *\r\n * Usage:\r\n * ```\r\n * const unsubscribe = toast.onChange((payload) => {\r\n *   switch (payload.status) {\r\n *   case \"added\":\r\n *     // new toast added\r\n *     break;\r\n *   case \"updated\":\r\n *     // toast updated\r\n *     break;\r\n *   case \"removed\":\r\n *     // toast has been removed\r\n *     break;\r\n *   }\r\n * })\r\n * ```\r\n */\n\n\ntoast.onChange = callback => {\n  eventManager.on(4\n  /* Event.Change */\n  , callback);\n  return () => {\n    eventManager.off(4\n    /* Event.Change */\n    , callback);\n  };\n};\n\ntoast.POSITION = POSITION;\ntoast.TYPE = TYPE;\n/**\r\n * Wait until the ToastContainer is mounted to dispatch the toast\r\n * and attach isActive method\r\n */\n\neventManager.on(2\n/* Event.DidMount */\n, containerInstance => {\n  latestInstance = containerInstance.containerId || containerInstance;\n  containers.set(latestInstance, containerInstance);\n  queue.forEach(item => {\n    eventManager.emit(0\n    /* Event.Show */\n    , item.content, item.options);\n  });\n  queue = [];\n}).on(3\n/* Event.WillUnmount */\n, containerInstance => {\n  containers.delete(containerInstance.containerId || containerInstance);\n\n  if (containers.size === 0) {\n    eventManager.off(0\n    /* Event.Show */\n    ).off(1\n    /* Event.Clear */\n    ).off(5\n    /* Event.ClearWaitingQueue */\n    );\n  }\n});\nexport { Bounce, Flip, Icons, Slide, ToastContainer, Zoom, collapseToast, cssTransition, toast, useToast, useToastContainer };","map":{"version":3,"sources":["../src/utils/propValidator.ts","../src/utils/constant.ts","../src/utils/collapseToast.ts","../src/utils/cssTransition.tsx","../src/utils/mapper.ts","../src/core/eventManager.ts","../src/components/Icons.tsx","../src/hooks/useToastContainer.ts","../src/hooks/useToast.ts","../src/components/CloseButton.tsx","../src/components/ProgressBar.tsx","../src/components/Toast.tsx","../src/components/Transitions.tsx","../src/components/ToastContainer.tsx","../src/core/toast.ts"],"names":["isNum","v","isNaN","isBool","isStr","isFn","parseClassName","isToastIdValid","toastId","getAutoCloseDelay","toastAutoClose","containerAutoClose","canBeRendered","content","isValidElement","POSITION","TOP_LEFT","TOP_RIGHT","TOP_CENTER","BOTTOM_LEFT","BOTTOM_RIGHT","BOTTOM_CENTER","TYPE","INFO","SUCCESS","WARNING","ERROR","DEFAULT","collapseToast","node","done","duration","style","requestAnimationFrame","scrollHeight","setTimeout","cssTransition","appendPosition","collapse","collapseDuration","isIn","enterClassName","enter","exitClassName","exit","animationStep","useRef","useLayoutEffect","nodeRef","classToToken","onEntered","e","onEnter","useEffect","onExited","onExit","preventExitTransition","React","toToastItem","toast","status","containerId","id","theme","type","data","isLoading","icon","eventManager","list","emitQueue","on","off","cb","cancelEmit","timers","emit","callback","timer","Svg","rest","viewBox","width","height","fill","props","d","className","Icons","info","warning","success","error","spinner","Spinner","maybeIcon","getIcon","Icon","iconProps","cloneElement","useToastContainer","useReducer","x","useState","containerRef","toastToRender","isToastActive","toastIds","instance","toastKey","displayedToast","count","queue","getToast","removeToast","limit","setToastIds","state","staleId","appendToast","options","isNotValid","closeToast","isNotAnUpdate","updateId","toastProps","key","closeButton","rtl","position","transition","bodyClassName","bodyStyle","onClick","pauseOnHover","pauseOnFocusLoss","draggable","draggablePercent","draggableDirection","closeOnClick","progressClassName","progressStyle","autoClose","hideProgressBar","progress","role","deleteToast","removed","queueLen","freeSlot","dequeueToast","toDequeue","i","forceUpdate","toastContent","toRender","collection","Array","p","useToast","toastRef","drag","start","y","delta","removalDistance","canCloseOnClick","canDrag","boundingRect","didMove","syncProps","once","bindFocusEvents","unbindFocusEvents","bindDragEvents","getX","getY","right","pauseToast","playToast","setIsRunning","document","window","Math","unbindDragEvents","setPreventExitTransition","eventHandlers","onMouseDown","onTouchStart","onMouseUp","onTouchEnd","onDragTransitionEnd","CloseButton","ariaLabel","fillRule","ProgressBar","animationDuration","delay","animationPlayState","isRunning","opacity","hide","defaultClassName","cx","controlledProgress","classNames","animationEvent","Toast","cssClasses","isProgressControlled","closeButtonProps","Close","ref","iconOut","Bounce","Slide","Zoom","Flip","ToastContainer","forwardRef","getToastToRender","containerStyle","toastList","pointerEvents","getClassName","length","newestOnTop","containers","container","generateToastId","getToastId","dispatchToast","mergeOptions","pending","resetParams","resolver","input","baseParams","result","params","render","promise","err","createToastByType","t","oldContent","nextOptions","containerInstance","latestInstance","item"],"mappings":"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","sourcesContent":["import { isValidElement } from 'react';\n\nimport { Id } from '../types';\n\nexport function isNum(v: any): v is Number {\n  return typeof v === 'number' && !isNaN(v);\n}\n\nexport function isBool(v: any): v is Boolean {\n  return typeof v === 'boolean';\n}\n\nexport function isStr(v: any): v is String {\n  return typeof v === 'string';\n}\n\nexport function isFn(v: any): v is Function {\n  return typeof v === 'function';\n}\n\nexport function parseClassName(v: any) {\n  return isStr(v) || isFn(v) ? v : null;\n}\n\nexport function isToastIdValid(toastId?: Id) {\n  return toastId != null;\n}\n\nexport function getAutoCloseDelay(\n  toastAutoClose?: false | number,\n  containerAutoClose?: false | number\n) {\n  return toastAutoClose === false ||\n    (isNum(toastAutoClose) && toastAutoClose > 0)\n    ? toastAutoClose\n    : containerAutoClose;\n}\n\nexport function canBeRendered<T>(content: T): boolean {\n  return (\n    isValidElement(content) || isStr(content) || isFn(content) || isNum(content)\n  );\n}\n","import { ToastPosition, TypeOptions } from '../types';\n\ntype KeyOfPosition =\n  | 'TOP_LEFT'\n  | 'TOP_RIGHT'\n  | 'TOP_CENTER'\n  | 'BOTTOM_LEFT'\n  | 'BOTTOM_RIGHT'\n  | 'BOTTOM_CENTER';\n\ntype KeyOfType = 'INFO' | 'SUCCESS' | 'WARNING' | 'ERROR' | 'DEFAULT';\n\nexport const POSITION: { [key in KeyOfPosition]: ToastPosition } = {\n  TOP_LEFT: 'top-left',\n  TOP_RIGHT: 'top-right',\n  TOP_CENTER: 'top-center',\n  BOTTOM_LEFT: 'bottom-left',\n  BOTTOM_RIGHT: 'bottom-right',\n  BOTTOM_CENTER: 'bottom-center'\n};\n\nexport const TYPE: { [key in KeyOfType]: TypeOptions } = {\n  INFO: 'info',\n  SUCCESS: 'success',\n  WARNING: 'warning',\n  ERROR: 'error',\n  DEFAULT: 'default'\n};\n\nexport const enum Default {\n  COLLAPSE_DURATION = 300,\n  DEBOUNCE_DURATION = 50,\n  CSS_NAMESPACE = 'Toastify',\n  DRAGGABLE_PERCENT = 80\n}\n\nexport const enum Direction {\n  X = 'x',\n  Y = 'y'\n}\n\nexport const enum SyntheticEvent {\n  ENTRANCE_ANIMATION_END = 'd'\n}\n","import { Default } from './constant';\n\n/**\n * Used to collapse toast after exit animation\n */\nexport function collapseToast(\n  node: HTMLElement,\n  done: () => void,\n  duration = Default.COLLAPSE_DURATION\n) {\n  const { scrollHeight, style } = node;\n\n  requestAnimationFrame(() => {\n    style.minHeight = 'initial';\n    style.height = scrollHeight + 'px';\n    style.transition = `all ${duration}ms`;\n\n    requestAnimationFrame(() => {\n      style.height = '0';\n      style.padding = '0';\n      style.margin = '0';\n      setTimeout(done, duration as number);\n    });\n  });\n}\n","import React, { useEffect, useLayoutEffect, useRef } from 'react';\nimport { collapseToast } from './collapseToast';\nimport { Default, SyntheticEvent } from './constant';\n\nimport { ToastTransitionProps } from '../types';\n\nexport interface CSSTransitionProps {\n  /**\n   * Css class to apply when toast enter\n   */\n  enter: string;\n\n  /**\n   * Css class to apply when toast leave\n   */\n  exit: string;\n\n  /**\n   * Append current toast position to the classname.\n   * If multiple classes are provided, only the last one will get the position\n   * For instance `myclass--top-center`...\n   * `Default: false`\n   */\n  appendPosition?: boolean;\n\n  /**\n   * Collapse toast smoothly when exit animation end\n   * `Default: true`\n   */\n  collapse?: boolean;\n\n  /**\n   * Collapse transition duration\n   * `Default: 300`\n   */\n  collapseDuration?: number;\n}\n\nconst enum AnimationStep {\n  Enter,\n  Exit\n}\n\n/**\n * Css animation that just work.\n * You could use animate.css for instance\n *\n *\n * ```\n * cssTransition({\n *   enter: \"animate__animated animate__bounceIn\",\n *   exit: \"animate__animated animate__bounceOut\"\n * })\n * ```\n *\n */\nexport function cssTransition({\n  enter,\n  exit,\n  appendPosition = false,\n  collapse = true,\n  collapseDuration = Default.COLLAPSE_DURATION\n}: CSSTransitionProps) {\n  return function ToastTransition({\n    children,\n    position,\n    preventExitTransition,\n    done,\n    nodeRef,\n    isIn\n  }: ToastTransitionProps) {\n    const enterClassName = appendPosition ? `${enter}--${position}` : enter;\n    const exitClassName = appendPosition ? `${exit}--${position}` : exit;\n    const animationStep = useRef(AnimationStep.Enter);\n\n    useLayoutEffect(() => {\n      const node = nodeRef.current!;\n      const classToToken = enterClassName.split(' ');\n\n      const onEntered = (e: AnimationEvent) => {\n        if (e.target !== nodeRef.current) return;\n\n        node.dispatchEvent(new Event(SyntheticEvent.ENTRANCE_ANIMATION_END));\n        node.removeEventListener('animationend', onEntered);\n        node.removeEventListener('animationcancel', onEntered);\n        if (\n          animationStep.current === AnimationStep.Enter &&\n          e.type !== 'animationcancel'\n        ) {\n          node.classList.remove(...classToToken);\n        }\n      };\n\n      const onEnter = () => {\n        node.classList.add(...classToToken);\n        node.addEventListener('animationend', onEntered);\n        node.addEventListener('animationcancel', onEntered);\n      };\n\n      onEnter();\n    }, []);\n\n    useEffect(() => {\n      const node = nodeRef.current!;\n\n      const onExited = () => {\n        node.removeEventListener('animationend', onExited);\n        collapse ? collapseToast(node, done, collapseDuration) : done();\n      };\n\n      const onExit = () => {\n        animationStep.current = AnimationStep.Exit;\n        node.className += ` ${exitClassName}`;\n        node.addEventListener('animationend', onExited);\n      };\n\n      if (!isIn) preventExitTransition ? onExited() : onExit();\n    }, [isIn]);\n\n    return <>{children}</>;\n  };\n}\n","import { Toast, ToastItem, ToastItemStatus } from '../types';\n\nexport function toToastItem(toast: Toast, status: ToastItemStatus): ToastItem {\n  return {\n    content: toast.content,\n    containerId: toast.props.containerId,\n    id: toast.props.toastId,\n    theme: toast.props.theme,\n    type: toast.props.type,\n    data: toast.props.data || {},\n    isLoading: toast.props.isLoading,\n    icon: toast.props.icon,\n    status\n  };\n}\n","import {\n  Id,\n  ToastContent,\n  ClearWaitingQueueParams,\n  NotValidatedToastProps,\n  ToastItem\n} from '../types';\nimport { ContainerInstance } from '../hooks';\n\nexport const enum Event {\n  Show,\n  Clear,\n  DidMount,\n  WillUnmount,\n  Change,\n  ClearWaitingQueue\n}\n\ntype OnShowCallback = (\n  content: ToastContent,\n  options: NotValidatedToastProps\n) => void;\ntype OnClearCallback = (id?: Id) => void;\ntype OnClearWaitingQueue = (params: ClearWaitingQueueParams) => void;\ntype OnDidMountCallback = (containerInstance: ContainerInstance) => void;\ntype OnWillUnmountCallback = OnDidMountCallback;\n\nexport type OnChangeCallback = (toast: ToastItem) => void;\n\ntype Callback =\n  | OnShowCallback\n  | OnClearCallback\n  | OnClearWaitingQueue\n  | OnDidMountCallback\n  | OnWillUnmountCallback\n  | OnChangeCallback;\ntype TimeoutId = ReturnType<typeof setTimeout>;\n\nexport interface EventManager {\n  list: Map<Event, Callback[]>;\n  emitQueue: Map<Event, TimeoutId[]>;\n  on(event: Event.Show, callback: OnShowCallback): EventManager;\n  on(event: Event.Clear, callback: OnClearCallback): EventManager;\n  on(\n    event: Event.ClearWaitingQueue,\n    callback: OnClearWaitingQueue\n  ): EventManager;\n  on(event: Event.DidMount, callback: OnDidMountCallback): EventManager;\n  on(event: Event.WillUnmount, callback: OnWillUnmountCallback): EventManager;\n  on(event: Event.Change, callback: OnChangeCallback): EventManager;\n  off(event: Event, callback?: Callback): EventManager;\n  cancelEmit(event: Event): EventManager;\n  emit(\n    event: Event.Show,\n    content: React.ReactNode,\n    options: NotValidatedToastProps\n  ): void;\n  emit(event: Event.Clear, id?: string | number): void;\n  emit(event: Event.ClearWaitingQueue, params: ClearWaitingQueueParams): void;\n  emit(event: Event.DidMount, containerInstance: ContainerInstance): void;\n  emit(event: Event.WillUnmount, containerInstance: ContainerInstance): void;\n  emit(event: Event.Change, data: ToastItem): void;\n}\n\nexport const eventManager: EventManager = {\n  list: new Map(),\n  emitQueue: new Map(),\n\n  on(event: Event, callback: Callback) {\n    this.list.has(event) || this.list.set(event, []);\n    this.list.get(event)!.push(callback);\n    return this;\n  },\n\n  off(event, callback) {\n    if (callback) {\n      const cb = this.list.get(event)!.filter(cb => cb !== callback);\n      this.list.set(event, cb);\n      return this;\n    }\n    this.list.delete(event);\n    return this;\n  },\n\n  cancelEmit(event) {\n    const timers = this.emitQueue.get(event);\n    if (timers) {\n      timers.forEach(clearTimeout);\n      this.emitQueue.delete(event);\n    }\n\n    return this;\n  },\n\n  /**\n   * Enqueue the event at the end of the call stack\n   * Doing so let the user call toast as follow:\n   * toast('1')\n   * toast('2')\n   * toast('3')\n   * Without setTimemout the code above will not work\n   */\n  emit(event: Event, ...args: any[]) {\n    this.list.has(event) &&\n      this.list.get(event)!.forEach((callback: Callback) => {\n        const timer: TimeoutId = setTimeout(() => {\n          // @ts-ignore\n          callback(...args);\n        }, 0);\n\n        this.emitQueue.has(event) || this.emitQueue.set(event, []);\n        this.emitQueue.get(event)!.push(timer);\n      });\n  }\n};\n","import React, { cloneElement, isValidElement } from 'react';\n\nimport { Theme, ToastProps, TypeOptions } from '../types';\nimport { Default, isFn, isNum, isStr } from '../utils';\n\n/**\n * Used when providing custom icon\n */\nexport interface IconProps {\n  theme: Theme;\n  type: TypeOptions;\n}\n\nexport type BuiltInIconProps = React.SVGProps<SVGSVGElement> & IconProps;\n\nconst Svg: React.FC<BuiltInIconProps> = ({ theme, type, ...rest }) => (\n  <svg\n    viewBox=\"0 0 24 24\"\n    width=\"100%\"\n    height=\"100%\"\n    fill={\n      theme === 'colored'\n        ? 'currentColor'\n        : `var(--toastify-icon-color-${type})`\n    }\n    {...rest}\n  />\n);\n\nfunction Warning(props: BuiltInIconProps) {\n  return (\n    <Svg {...props}>\n      <path d=\"M23.32 17.191L15.438 2.184C14.728.833 13.416 0 11.996 0c-1.42 0-2.733.833-3.443 2.184L.533 17.448a4.744 4.744 0 000 4.368C1.243 23.167 2.555 24 3.975 24h16.05C22.22 24 24 22.044 24 19.632c0-.904-.251-1.746-.68-2.44zm-9.622 1.46c0 1.033-.724 1.823-1.698 1.823s-1.698-.79-1.698-1.822v-.043c0-1.028.724-1.822 1.698-1.822s1.698.79 1.698 1.822v.043zm.039-12.285l-.84 8.06c-.057.581-.408.943-.897.943-.49 0-.84-.367-.896-.942l-.84-8.065c-.057-.624.25-1.095.779-1.095h1.91c.528.005.84.476.784 1.1z\" />\n    </Svg>\n  );\n}\n\nfunction Info(props: BuiltInIconProps) {\n  return (\n    <Svg {...props}>\n      <path d=\"M12 0a12 12 0 1012 12A12.013 12.013 0 0012 0zm.25 5a1.5 1.5 0 11-1.5 1.5 1.5 1.5 0 011.5-1.5zm2.25 13.5h-4a1 1 0 010-2h.75a.25.25 0 00.25-.25v-4.5a.25.25 0 00-.25-.25h-.75a1 1 0 010-2h1a2 2 0 012 2v4.75a.25.25 0 00.25.25h.75a1 1 0 110 2z\" />\n    </Svg>\n  );\n}\n\nfunction Success(props: BuiltInIconProps) {\n  return (\n    <Svg {...props}>\n      <path d=\"M12 0a12 12 0 1012 12A12.014 12.014 0 0012 0zm6.927 8.2l-6.845 9.289a1.011 1.011 0 01-1.43.188l-4.888-3.908a1 1 0 111.25-1.562l4.076 3.261 6.227-8.451a1 1 0 111.61 1.183z\" />\n    </Svg>\n  );\n}\n\nfunction Error(props: BuiltInIconProps) {\n  return (\n    <Svg {...props}>\n      <path d=\"M11.983 0a12.206 12.206 0 00-8.51 3.653A11.8 11.8 0 000 12.207 11.779 11.779 0 0011.8 24h.214A12.111 12.111 0 0024 11.791 11.766 11.766 0 0011.983 0zM10.5 16.542a1.476 1.476 0 011.449-1.53h.027a1.527 1.527 0 011.523 1.47 1.475 1.475 0 01-1.449 1.53h-.027a1.529 1.529 0 01-1.523-1.47zM11 12.5v-6a1 1 0 012 0v6a1 1 0 11-2 0z\" />\n    </Svg>\n  );\n}\n\nfunction Spinner() {\n  return <div className={`${Default.CSS_NAMESPACE}__spinner`} />;\n}\n\nexport const Icons = {\n  info: Info,\n  warning: Warning,\n  success: Success,\n  error: Error,\n  spinner: Spinner\n};\n\nconst maybeIcon = (type: string): type is keyof typeof Icons => type in Icons;\n\nexport function getIcon({ theme, type, isLoading, icon }: ToastProps) {\n  let Icon: React.ReactNode = null;\n  const iconProps = { theme, type };\n\n  if (icon === false) {\n    // hide\n  } else if (isFn(icon)) {\n    Icon = icon(iconProps);\n  } else if (isValidElement(icon)) {\n    Icon = cloneElement(icon, iconProps);\n  } else if (isStr(icon) || isNum(icon)) {\n    Icon = icon;\n  } else if (isLoading) {\n    Icon = Icons.spinner();\n  } else if (maybeIcon(type)) {\n    Icon = Icons[type](iconProps);\n  }\n\n  return Icon;\n}\n","import {\n  useEffect,\n  useRef,\n  useReducer,\n  cloneElement,\n  isValidElement,\n  useState\n} from 'react';\nimport {\n  parseClassName,\n  canBeRendered,\n  isBool,\n  isFn,\n  isNum,\n  isStr,\n  isToastIdValid,\n  getAutoCloseDelay,\n  toToastItem\n} from '../utils';\nimport { eventManager, Event } from '../core/eventManager';\n\nimport {\n  Id,\n  ToastContainerProps,\n  ToastProps,\n  ToastContent,\n  Toast,\n  ToastPosition,\n  ClearWaitingQueueParams,\n  NotValidatedToastProps,\n  ToastTransition\n} from '../types';\n\nimport { getIcon } from '../components/Icons';\n\ninterface QueuedToast {\n  toastContent: ToastContent;\n  toastProps: ToastProps;\n  staleId?: Id;\n}\n\nexport interface ContainerInstance {\n  toastKey: number;\n  displayedToast: number;\n  props: ToastContainerProps;\n  containerId?: Id | null;\n  isToastActive: (toastId: Id) => boolean;\n  getToast: (id: Id) => Toast | null | undefined;\n  queue: QueuedToast[];\n  count: number;\n}\n\nexport function useToastContainer(props: ToastContainerProps) {\n  const [, forceUpdate] = useReducer(x => x + 1, 0);\n  const [toastIds, setToastIds] = useState<Id[]>([]);\n  const containerRef = useRef(null);\n  const toastToRender = useRef(new Map<Id, Toast>()).current;\n  const isToastActive = (id: Id) => toastIds.indexOf(id) !== -1;\n  const instance = useRef<ContainerInstance>({\n    toastKey: 1,\n    displayedToast: 0,\n    count: 0,\n    queue: [],\n    props,\n    containerId: null,\n    isToastActive,\n    getToast: id => toastToRender.get(id)\n  }).current;\n\n  useEffect(() => {\n    instance.containerId = props.containerId;\n    eventManager\n      .cancelEmit(Event.WillUnmount)\n      .on(Event.Show, buildToast)\n      .on(Event.Clear, toastId => containerRef.current && removeToast(toastId))\n      .on(Event.ClearWaitingQueue, clearWaitingQueue)\n      .emit(Event.DidMount, instance);\n\n      return () => {\n        toastToRender.clear();\n        eventManager.emit(Event.WillUnmount, instance);\n      };\n  }, []);\n\n  useEffect(() => {\n    instance.props = props;\n    instance.isToastActive = isToastActive;\n    instance.displayedToast = toastIds.length;\n  });\n\n  function clearWaitingQueue({ containerId }: ClearWaitingQueueParams) {\n    const { limit } = instance.props;\n    if (limit && (!containerId || instance.containerId === containerId)) {\n      instance.count -= instance.queue.length;\n      instance.queue = [];\n    }\n  }\n\n  function removeToast(toastId?: Id) {\n    setToastIds(state =>\n      isToastIdValid(toastId) ? state.filter(id => id !== toastId) : []\n    );\n  }\n\n  function dequeueToast() {\n    const { toastContent, toastProps, staleId } =\n      instance.queue.shift() as QueuedToast;\n    appendToast(toastContent, toastProps, staleId);\n  }\n\n  /**\n   * check if a container is attached to the dom\n   * check for multi-container, build only if associated\n   * check for duplicate toastId if no update\n   */\n  function isNotValid(options: NotValidatedToastProps) {\n    return (\n      !containerRef.current ||\n      (instance.props.enableMultiContainer &&\n        options.containerId !== instance.props.containerId) ||\n      (toastToRender.has(options.toastId) && options.updateId == null)\n    );\n  }\n\n  // this function and all the function called inside needs to rely on refs\n  function buildToast(\n    content: ToastContent,\n    { delay, staleId, ...options }: NotValidatedToastProps\n  ) {\n    if (!canBeRendered(content) || isNotValid(options)) return;\n\n    const { toastId, updateId, data } = options;\n    const { props } = instance;\n    const closeToast = () => removeToast(toastId);\n    const isNotAnUpdate = updateId == null;\n\n    if (isNotAnUpdate) instance.count++;\n\n    const toastProps: ToastProps = {\n      toastId,\n      updateId,\n      data,\n      containerId: options.containerId,\n      isLoading: options.isLoading,\n      theme: options.theme || props.theme!,\n      icon: options.icon != null ? options.icon : props.icon,\n      isIn: false,\n      key: options.key || instance.toastKey++,\n      type: options.type!,\n      closeToast: closeToast,\n      closeButton: options.closeButton,\n      rtl: props.rtl,\n      position: options.position || (props.position as ToastPosition),\n      transition: options.transition || (props.transition as ToastTransition),\n      className: parseClassName(options.className || props.toastClassName),\n      bodyClassName: parseClassName(\n        options.bodyClassName || props.bodyClassName\n      ),\n      style: options.style || props.toastStyle,\n      bodyStyle: options.bodyStyle || props.bodyStyle,\n      onClick: options.onClick || props.onClick,\n      pauseOnHover: isBool(options.pauseOnHover)\n        ? options.pauseOnHover\n        : props.pauseOnHover,\n      pauseOnFocusLoss: isBool(options.pauseOnFocusLoss)\n        ? options.pauseOnFocusLoss\n        : props.pauseOnFocusLoss,\n      draggable: isBool(options.draggable)\n        ? options.draggable\n        : props.draggable,\n      draggablePercent:\n        options.draggablePercent || (props.draggablePercent as number),\n      draggableDirection:\n        options.draggableDirection || props.draggableDirection,\n      closeOnClick: isBool(options.closeOnClick)\n        ? options.closeOnClick\n        : props.closeOnClick,\n      progressClassName: parseClassName(\n        options.progressClassName || props.progressClassName\n      ),\n      progressStyle: options.progressStyle || props.progressStyle,\n      autoClose: options.isLoading\n        ? false\n        : getAutoCloseDelay(options.autoClose, props.autoClose),\n      hideProgressBar: isBool(options.hideProgressBar)\n        ? options.hideProgressBar\n        : props.hideProgressBar,\n      progress: options.progress,\n      role: options.role || props.role,\n      deleteToast() {\n        const removed = toToastItem(toastToRender.get(toastId)!, 'removed');\n        toastToRender.delete(toastId);\n\n        eventManager.emit(Event.Change, removed);\n\n        const queueLen = instance.queue.length;\n        instance.count = isToastIdValid(toastId)\n          ? instance.count - 1\n          : instance.count - instance.displayedToast;\n\n        if (instance.count < 0) instance.count = 0;\n\n        if (queueLen > 0) {\n          const freeSlot = isToastIdValid(toastId) ? 1 : instance.props.limit!;\n\n          if (queueLen === 1 || freeSlot === 1) {\n            instance.displayedToast++;\n            dequeueToast();\n          } else {\n            const toDequeue = freeSlot > queueLen ? queueLen : freeSlot;\n            instance.displayedToast = toDequeue;\n\n            for (let i = 0; i < toDequeue; i++) dequeueToast();\n          }\n        } else {\n          forceUpdate();\n        }\n      }\n    };\n\n    toastProps.iconOut = getIcon(toastProps);\n\n    if (isFn(options.onOpen)) toastProps.onOpen = options.onOpen;\n    if (isFn(options.onClose)) toastProps.onClose = options.onClose;\n\n    toastProps.closeButton = props.closeButton;\n\n    if (options.closeButton === false || canBeRendered(options.closeButton)) {\n      toastProps.closeButton = options.closeButton;\n    } else if (options.closeButton === true) {\n      toastProps.closeButton = canBeRendered(props.closeButton)\n        ? props.closeButton\n        : true;\n    }\n\n    let toastContent = content;\n\n    if (isValidElement(content) && !isStr(content.type)) {\n      toastContent = cloneElement(content, {\n        closeToast,\n        toastProps,\n        data\n      });\n    } else if (isFn(content)) {\n      toastContent = content({ closeToast, toastProps, data });\n    }\n\n    // not handling limit + delay by design. Waiting for user feedback first\n    if (\n      props.limit &&\n      props.limit > 0 &&\n      instance.count > props.limit &&\n      isNotAnUpdate\n    ) {\n      instance.queue.push({ toastContent, toastProps, staleId });\n    } else if (isNum(delay)) {\n      setTimeout(() => {\n        appendToast(toastContent, toastProps, staleId);\n      }, delay);\n    } else {\n      appendToast(toastContent, toastProps, staleId);\n    }\n  }\n\n  function appendToast(\n    content: ToastContent,\n    toastProps: ToastProps,\n    staleId?: Id\n  ) {\n    const { toastId } = toastProps;\n\n    if (staleId) toastToRender.delete(staleId);\n\n    const toast = {\n      content,\n      props: toastProps\n    };\n    toastToRender.set(toastId, toast);\n\n    setToastIds(state => [...state, toastId].filter(id => id !== staleId));\n    eventManager.emit(\n      Event.Change,\n      toToastItem(toast, toast.props.updateId == null ? 'added' : 'updated')\n    );\n  }\n\n  function getToastToRender<T>(\n    cb: (position: ToastPosition, toastList: Toast[]) => T\n  ) {\n    const toRender = new Map<ToastPosition, Toast[]>();\n    const collection = Array.from(toastToRender.values());\n\n    if (props.newestOnTop) collection.reverse();\n\n    collection.forEach(toast => {\n      const { position } = toast.props;\n      toRender.has(position) || toRender.set(position, []);\n      toRender.get(position)!.push(toast);\n    });\n\n    return Array.from(toRender, p => cb(p[0], p[1]));\n  }\n\n  return {\n    getToastToRender,\n    containerRef,\n    isToastActive\n  };\n}\n","import {\n  useState,\n  useRef,\n  useEffect,\n  isValidElement,\n  DOMAttributes\n} from 'react';\n\nimport { isFn, Default, Direction, SyntheticEvent } from '../utils';\nimport { ToastProps } from '../types';\n\ninterface Draggable {\n  start: number;\n  x: number;\n  y: number;\n  delta: number;\n  removalDistance: number;\n  canCloseOnClick: boolean;\n  canDrag: boolean;\n  boundingRect: DOMRect | null;\n  didMove: boolean;\n}\n\ntype DragEvent = MouseEvent & TouchEvent;\n\nfunction getX(e: DragEvent) {\n  return e.targetTouches && e.targetTouches.length >= 1\n    ? e.targetTouches[0].clientX\n    : e.clientX;\n}\n\nfunction getY(e: DragEvent) {\n  return e.targetTouches && e.targetTouches.length >= 1\n    ? e.targetTouches[0].clientY\n    : e.clientY;\n}\n\nexport function useToast(props: ToastProps) {\n  const [isRunning, setIsRunning] = useState(false);\n  const [preventExitTransition, setPreventExitTransition] = useState(false);\n  const toastRef = useRef<HTMLDivElement>(null);\n  const drag = useRef<Draggable>({\n    start: 0,\n    x: 0,\n    y: 0,\n    delta: 0,\n    removalDistance: 0,\n    canCloseOnClick: true,\n    canDrag: false,\n    boundingRect: null,\n    didMove: false\n  }).current;\n  const syncProps = useRef(props);\n  const { autoClose, pauseOnHover, closeToast, onClick, closeOnClick } = props;\n\n  useEffect(() => {\n    syncProps.current = props;\n  });\n\n  useEffect(() => {\n    if (toastRef.current)\n      toastRef.current.addEventListener(\n        SyntheticEvent.ENTRANCE_ANIMATION_END,\n        playToast,\n        { once: true }\n      );\n\n    if (isFn(props.onOpen))\n      props.onOpen(isValidElement(props.children) && props.children.props);\n\n    return () => {\n      const props = syncProps.current;\n      if (isFn(props.onClose))\n        props.onClose(isValidElement(props.children) && props.children.props);\n    };\n  }, []);\n\n  useEffect(() => {\n    props.pauseOnFocusLoss && bindFocusEvents();\n    return () => {\n      props.pauseOnFocusLoss && unbindFocusEvents();\n    };\n  }, [props.pauseOnFocusLoss]);\n\n  function onDragStart(\n    e: React.MouseEvent<HTMLElement, MouseEvent> | React.TouchEvent<HTMLElement>\n  ) {\n    if (props.draggable) {\n      bindDragEvents();\n      const toast = toastRef.current!;\n      drag.canCloseOnClick = true;\n      drag.canDrag = true;\n      drag.boundingRect = toast.getBoundingClientRect();\n      toast.style.transition = '';\n      drag.x = getX(e.nativeEvent as DragEvent);\n      drag.y = getY(e.nativeEvent as DragEvent);\n\n      if (props.draggableDirection === Direction.X) {\n        drag.start = drag.x;\n        drag.removalDistance =\n          toast.offsetWidth * (props.draggablePercent / 100);\n      } else {\n        drag.start = drag.y;\n        drag.removalDistance =\n          toast.offsetHeight *\n          (props.draggablePercent === Default.DRAGGABLE_PERCENT\n            ? props.draggablePercent * 1.5\n            : props.draggablePercent / 100);\n      }\n    }\n  }\n\n  function onDragTransitionEnd() {\n    if (drag.boundingRect) {\n      const { top, bottom, left, right } = drag.boundingRect;\n\n      if (\n        props.pauseOnHover &&\n        drag.x >= left &&\n        drag.x <= right &&\n        drag.y >= top &&\n        drag.y <= bottom\n      ) {\n        pauseToast();\n      } else {\n        playToast();\n      }\n    }\n  }\n\n  function playToast() {\n    setIsRunning(true);\n  }\n\n  function pauseToast() {\n    setIsRunning(false);\n  }\n\n  function bindFocusEvents() {\n    if (!document.hasFocus()) pauseToast();\n\n    window.addEventListener('focus', playToast);\n    window.addEventListener('blur', pauseToast);\n  }\n\n  function unbindFocusEvents() {\n    window.removeEventListener('focus', playToast);\n    window.removeEventListener('blur', pauseToast);\n  }\n\n  function bindDragEvents() {\n    drag.didMove = false;\n    document.addEventListener('mousemove', onDragMove);\n    document.addEventListener('mouseup', onDragEnd);\n\n    document.addEventListener('touchmove', onDragMove);\n    document.addEventListener('touchend', onDragEnd);\n  }\n\n  function unbindDragEvents() {\n    document.removeEventListener('mousemove', onDragMove);\n    document.removeEventListener('mouseup', onDragEnd);\n\n    document.removeEventListener('touchmove', onDragMove);\n    document.removeEventListener('touchend', onDragEnd);\n  }\n\n  function onDragMove(e: MouseEvent | TouchEvent) {\n    const toast = toastRef.current!;\n    if (drag.canDrag && toast) {\n      drag.didMove = true;\n      if (isRunning) pauseToast();\n      drag.x = getX(e as DragEvent);\n      drag.y = getY(e as DragEvent);\n      if (props.draggableDirection === Direction.X) {\n        drag.delta = drag.x - drag.start;\n      } else {\n        drag.delta = drag.y - drag.start;\n      }\n\n      // prevent false positif during a toast click\n      if (drag.start !== drag.x) drag.canCloseOnClick = false;\n      toast.style.transform = `translate${props.draggableDirection}(${drag.delta}px)`;\n      toast.style.opacity = `${\n        1 - Math.abs(drag.delta / drag.removalDistance)\n      }`;\n    }\n  }\n\n  function onDragEnd() {\n    unbindDragEvents();\n    const toast = toastRef.current!;\n    if (drag.canDrag && drag.didMove && toast) {\n      drag.canDrag = false;\n      if (Math.abs(drag.delta) > drag.removalDistance) {\n        setPreventExitTransition(true);\n        props.closeToast();\n        return;\n      }\n      toast.style.transition = 'transform 0.2s, opacity 0.2s';\n      toast.style.transform = `translate${props.draggableDirection}(0)`;\n      toast.style.opacity = '1';\n    }\n  }\n\n  const eventHandlers: DOMAttributes<HTMLElement> = {\n    onMouseDown: onDragStart,\n    onTouchStart: onDragStart,\n    onMouseUp: onDragTransitionEnd,\n    onTouchEnd: onDragTransitionEnd\n  };\n\n  if (autoClose && pauseOnHover) {\n    eventHandlers.onMouseEnter = pauseToast;\n    eventHandlers.onMouseLeave = playToast;\n  }\n\n  // prevent toast from closing when user drags the toast\n  if (closeOnClick) {\n    eventHandlers.onClick = (e: React.MouseEvent) => {\n      onClick && onClick(e);\n      drag.canCloseOnClick && closeToast();\n    };\n  }\n\n  return {\n    playToast,\n    pauseToast,\n    isRunning,\n    preventExitTransition,\n    toastRef,\n    eventHandlers\n  };\n}\n","import React from 'react';\nimport { Default } from '../utils';\nimport { Theme, TypeOptions } from '../types';\n\nexport interface CloseButtonProps {\n  closeToast: (e: React.MouseEvent<HTMLElement>) => void;\n  type: TypeOptions;\n  ariaLabel?: string;\n  theme: Theme;\n}\n\nexport function CloseButton({\n  closeToast,\n  theme,\n  ariaLabel = 'close'\n}: CloseButtonProps) {\n  return (\n    <button\n      className={`${Default.CSS_NAMESPACE}__close-button ${Default.CSS_NAMESPACE}__close-button--${theme}`}\n      type=\"button\"\n      onClick={e => {\n        e.stopPropagation();\n        closeToast(e);\n      }}\n      aria-label={ariaLabel}\n    >\n      <svg aria-hidden=\"true\" viewBox=\"0 0 14 16\">\n        <path\n          fillRule=\"evenodd\"\n          d=\"M7.71 8.23l3.75 3.75-1.48 1.48-3.75-3.75-3.75 3.75L1 11.98l3.75-3.75L1 4.48 2.48 3l3.75 3.75L9.98 3l1.48 1.48-3.75 3.75z\"\n        />\n      </svg>\n    </button>\n  );\n}\n","import React from 'react';\nimport cx from 'clsx';\n\nimport { TYPE, Default, isFn } from './../utils';\nimport { TypeOptions, ToastClassName, Theme } from '../types';\n\nexport interface ProgressBarProps {\n  /**\n   * The animation delay which determine when to close the toast\n   */\n  delay: number;\n\n  /**\n   * Whether or not the animation is running or paused\n   */\n  isRunning: boolean;\n\n  /**\n   * Func to close the current toast\n   */\n  closeToast: () => void;\n\n  /**\n   * Optional type : info, success ...\n   */\n  type: TypeOptions;\n\n  /**\n   * The theme that is currently used\n   */\n  theme: Theme;\n\n  /**\n   * Hide or not the progress bar\n   */\n  hide?: boolean;\n\n  /**\n   * Optionnal className\n   */\n  className?: ToastClassName;\n\n  /**\n   * Optionnal inline style\n   */\n  style?: React.CSSProperties;\n\n  /**\n   * Tell wether or not controlled progress bar is used\n   */\n  controlledProgress?: boolean;\n\n  /**\n   * Controlled progress value\n   */\n  progress?: number | string;\n\n  /**\n   * Support rtl content\n   */\n  rtl?: boolean;\n\n  /**\n   * Tell if the component is visible on screen or not\n   */\n  isIn?: boolean;\n}\n\nexport function ProgressBar({\n  delay,\n  isRunning,\n  closeToast,\n  type,\n  hide,\n  className,\n  style: userStyle,\n  controlledProgress,\n  progress,\n  rtl,\n  isIn,\n  theme\n}: ProgressBarProps) {\n  const style: React.CSSProperties = {\n    ...userStyle,\n    animationDuration: `${delay}ms`,\n    animationPlayState: isRunning ? 'running' : 'paused',\n    opacity: hide ? 0 : 1\n  };\n\n  if (controlledProgress) style.transform = `scaleX(${progress})`;\n  const defaultClassName = cx(\n    `${Default.CSS_NAMESPACE}__progress-bar`,\n    controlledProgress\n      ? `${Default.CSS_NAMESPACE}__progress-bar--controlled`\n      : `${Default.CSS_NAMESPACE}__progress-bar--animated`,\n    `${Default.CSS_NAMESPACE}__progress-bar-theme--${theme}`,\n    `${Default.CSS_NAMESPACE}__progress-bar--${type}`,\n    {\n      [`${Default.CSS_NAMESPACE}__progress-bar--rtl`]: rtl\n    }\n  );\n  const classNames = isFn(className)\n    ? className({\n        rtl,\n        type,\n        defaultClassName\n      })\n    : cx(defaultClassName, className);\n\n  // 🧐 controlledProgress is derived from progress\n  // so if controlledProgress is set\n  // it means that this is also the case for progress\n  const animationEvent = {\n    [controlledProgress && progress! >= 1\n      ? 'onTransitionEnd'\n      : 'onAnimationEnd']:\n      controlledProgress && progress! < 1\n        ? null\n        : () => {\n            isIn && closeToast();\n          }\n  };\n\n  // TODO: add aria-valuenow, aria-valuemax, aria-valuemin\n\n  return (\n    <div\n      role=\"progressbar\"\n      aria-hidden={hide ? 'true' : 'false'}\n      aria-label=\"notification timer\"\n      className={classNames}\n      style={style}\n      {...animationEvent}\n    />\n  );\n}\n\nProgressBar.defaultProps = {\n  type: TYPE.DEFAULT,\n  hide: false\n};\n","import React from 'react';\nimport cx from 'clsx';\n\nimport { ProgressBar } from './ProgressBar';\nimport { CloseButton } from './CloseButton';\nimport { ToastProps } from '../types';\nimport { Default, isFn } from '../utils';\nimport { useToast } from '../hooks/useToast';\n\nexport const Toast: React.FC<ToastProps> = props => {\n  const { isRunning, preventExitTransition, toastRef, eventHandlers } =\n    useToast(props);\n  const {\n    closeButton,\n    children,\n    autoClose,\n    onClick,\n    type,\n    hideProgressBar,\n    closeToast,\n    transition: Transition,\n    position,\n    className,\n    style,\n    bodyClassName,\n    bodyStyle,\n    progressClassName,\n    progressStyle,\n    updateId,\n    role,\n    progress,\n    rtl,\n    toastId,\n    deleteToast,\n    isIn,\n    isLoading,\n    iconOut,\n    theme\n  } = props;\n  const defaultClassName = cx(\n    `${Default.CSS_NAMESPACE}__toast`,\n    `${Default.CSS_NAMESPACE}__toast-theme--${theme}`,\n    `${Default.CSS_NAMESPACE}__toast--${type}`,\n    {\n      [`${Default.CSS_NAMESPACE}__toast--rtl`]: rtl\n    }\n  );\n  const cssClasses = isFn(className)\n    ? className({\n        rtl,\n        position,\n        type,\n        defaultClassName\n      })\n    : cx(defaultClassName, className);\n  const isProgressControlled = !!progress;\n\n  const closeButtonProps = { closeToast, type, theme };\n  let Close: React.ReactNode = null;\n\n  if (closeButton === false) {\n    // hide\n  } else if (isFn(closeButton)) {\n    Close = closeButton(closeButtonProps);\n  } else if (React.isValidElement(closeButton)) {\n    Close = React.cloneElement(closeButton, closeButtonProps);\n  } else {\n    Close = CloseButton(closeButtonProps);\n  }\n\n  return (\n    <Transition\n      isIn={isIn}\n      done={deleteToast}\n      position={position}\n      preventExitTransition={preventExitTransition}\n      nodeRef={toastRef}\n    >\n      <div\n        id={toastId as string}\n        onClick={onClick}\n        className={cssClasses}\n        {...eventHandlers}\n        style={style}\n        ref={toastRef}\n      >\n        <div\n          {...(isIn && { role: role })}\n          className={\n            isFn(bodyClassName)\n              ? bodyClassName({ type })\n              : cx(`${Default.CSS_NAMESPACE}__toast-body`, bodyClassName)\n          }\n          style={bodyStyle}\n        >\n          {iconOut != null && (\n            <div\n              className={cx(`${Default.CSS_NAMESPACE}__toast-icon`, {\n                [`${Default.CSS_NAMESPACE}--animate-icon ${Default.CSS_NAMESPACE}__zoom-enter`]:\n                  !isLoading\n              })}\n            >\n              {iconOut}\n            </div>\n          )}\n          <div>{children}</div>\n        </div>\n        {Close}\n        {(autoClose || isProgressControlled) && (\n          <ProgressBar\n            {...(updateId && !isProgressControlled\n              ? { key: `pb-${updateId}` }\n              : {})}\n            rtl={rtl}\n            theme={theme}\n            delay={autoClose as number}\n            isRunning={isRunning}\n            isIn={isIn}\n            closeToast={closeToast}\n            hide={hideProgressBar}\n            type={type}\n            style={progressStyle}\n            className={progressClassName}\n            controlledProgress={isProgressControlled}\n            progress={progress}\n          />\n        )}\n      </div>\n    </Transition>\n  );\n};\n","import { Default, cssTransition } from '../utils';\n\nconst Bounce = cssTransition({\n  enter: `${Default.CSS_NAMESPACE}--animate ${Default.CSS_NAMESPACE}__bounce-enter`,\n  exit: `${Default.CSS_NAMESPACE}--animate ${Default.CSS_NAMESPACE}__bounce-exit`,\n  appendPosition: true\n});\n\nconst Slide = cssTransition({\n  enter: `${Default.CSS_NAMESPACE}--animate ${Default.CSS_NAMESPACE}__slide-enter`,\n  exit: `${Default.CSS_NAMESPACE}--animate ${Default.CSS_NAMESPACE}__slide-exit`,\n  appendPosition: true\n});\n\nconst Zoom = cssTransition({\n  enter: `${Default.CSS_NAMESPACE}--animate ${Default.CSS_NAMESPACE}__zoom-enter`,\n  exit: `${Default.CSS_NAMESPACE}--animate ${Default.CSS_NAMESPACE}__zoom-exit`\n});\n\nconst Flip = cssTransition({\n  enter: `${Default.CSS_NAMESPACE}--animate ${Default.CSS_NAMESPACE}__flip-enter`,\n  exit: `${Default.CSS_NAMESPACE}--animate ${Default.CSS_NAMESPACE}__flip-exit`\n});\n\nexport { Bounce, Slide, Zoom, Flip };\n","// https://github.com/yannickcr/eslint-plugin-react/issues/3140\n/* eslint react/prop-types: \"off\" */\nimport React, { forwardRef, StyleHTMLAttributes, useEffect } from 'react';\nimport cx from 'clsx';\n\nimport { Toast } from './Toast';\nimport { CloseButton } from './CloseButton';\nimport { Bounce } from './Transitions';\nimport { POSITION, Direction, Default, parseClassName, isFn } from '../utils';\nimport { useToastContainer } from '../hooks/useToastContainer';\nimport { ToastContainerProps, ToastPosition } from '../types';\n\nexport const ToastContainer = forwardRef<HTMLDivElement, ToastContainerProps>(\n  (props, ref) => {\n    const { getToastToRender, containerRef, isToastActive } =\n      useToastContainer(props);\n    const { className, style, rtl, containerId } = props;\n\n    function getClassName(position: ToastPosition) {\n      const defaultClassName = cx(\n        `${Default.CSS_NAMESPACE}__toast-container`,\n        `${Default.CSS_NAMESPACE}__toast-container--${position}`,\n        { [`${Default.CSS_NAMESPACE}__toast-container--rtl`]: rtl }\n      );\n      return isFn(className)\n        ? className({\n            position,\n            rtl,\n            defaultClassName\n          })\n        : cx(defaultClassName, parseClassName(className));\n    }\n\n    useEffect(() => {\n      if (ref) {\n        (ref as React.MutableRefObject<HTMLDivElement>).current =\n          containerRef.current!;\n      }\n    }, []);\n\n    return (\n      <div\n        ref={containerRef}\n        className={Default.CSS_NAMESPACE as string}\n        id={containerId as string}\n      >\n        {getToastToRender((position, toastList) => {\n          const containerStyle: React.CSSProperties = !toastList.length\n            ? { ...style, pointerEvents: 'none' }\n            : { ...style };\n\n          return (\n            <div\n              className={getClassName(position)}\n              style={containerStyle}\n              key={`container-${position}`}\n            >\n              {toastList.map(({ content, props: toastProps }, i) => {\n                return (\n                  <Toast\n                    {...toastProps}\n                    isIn={isToastActive(toastProps.toastId)}\n                    style={\n                      {\n                        ...toastProps.style,\n                        '--nth': i + 1,\n                        '--len': toastList.length\n                      } as StyleHTMLAttributes<HTMLDivElement>\n                    }\n                    key={`toast-${toastProps.key}`}\n                  >\n                    {content}\n                  </Toast>\n                );\n              })}\n            </div>\n          );\n        })}\n      </div>\n    );\n  }\n);\n\nToastContainer.displayName = 'ToastContainer';\n\nToastContainer.defaultProps = {\n  position: POSITION.TOP_RIGHT as ToastPosition,\n  transition: Bounce,\n  rtl: false,\n  autoClose: 5000,\n  hideProgressBar: false,\n  closeButton: CloseButton,\n  pauseOnHover: true,\n  pauseOnFocusLoss: true,\n  closeOnClick: true,\n  newestOnTop: false,\n  draggable: true,\n  draggablePercent: Default.DRAGGABLE_PERCENT as number,\n  draggableDirection: Direction.X,\n  role: 'alert',\n  theme: 'light'\n};\n","import { POSITION, TYPE, isStr, isNum, isFn, isToastIdValid } from '../utils';\nimport { eventManager, OnChangeCallback, Event } from './eventManager';\nimport {\n  ToastContent,\n  ToastOptions,\n  ToastProps,\n  Id,\n  UpdateOptions,\n  ClearWaitingQueueParams,\n  NotValidatedToastProps,\n  TypeOptions\n} from '../types';\nimport { ContainerInstance } from '../hooks';\n\ninterface EnqueuedToast {\n  content: ToastContent;\n  options: NotValidatedToastProps;\n}\n\nlet containers = new Map<ContainerInstance | Id, ContainerInstance>();\nlet latestInstance: ContainerInstance | Id;\nlet queue: EnqueuedToast[] = [];\n\n/**\n * Get the toast by id, given it's in the DOM, otherwise returns null\n */\nfunction getToast(toastId: Id, { containerId }: ToastOptions) {\n  const container = containers.get(containerId || latestInstance);\n  if (!container) return null;\n\n  return container.getToast(toastId);\n}\n\n/**\n * Generate a random toastId\n */\nfunction generateToastId() {\n  return Math.random().toString(36).substring(2, 9);\n}\n\n/**\n * Generate a toastId or use the one provided\n */\nfunction getToastId(options?: ToastOptions) {\n  if (options && (isStr(options.toastId) || isNum(options.toastId))) {\n    return options.toastId;\n  }\n\n  return generateToastId();\n}\n\n/**\n * If the container is not mounted, the toast is enqueued and\n * the container lazy mounted\n */\nfunction dispatchToast(\n  content: ToastContent,\n  options: NotValidatedToastProps\n): Id {\n  if (containers.size > 0) {\n    eventManager.emit(Event.Show, content, options);\n  } else {\n    queue.push({ content, options });\n  }\n\n  return options.toastId;\n}\n\n/**\n * Merge provided options with the defaults settings and generate the toastId\n */\nfunction mergeOptions(type: string, options?: ToastOptions) {\n  return {\n    ...options,\n    type: (options && options.type) || type,\n    toastId: getToastId(options)\n  } as NotValidatedToastProps;\n}\n\nfunction createToastByType(type: string) {\n  return (content: ToastContent, options?: ToastOptions) =>\n    dispatchToast(content, mergeOptions(type, options));\n}\n\nfunction toast(content: ToastContent, options?: ToastOptions) {\n  return dispatchToast(content, mergeOptions(TYPE.DEFAULT, options));\n}\n\ntoast.loading = (content: ToastContent, options?: ToastOptions) =>\n  dispatchToast(\n    content,\n    mergeOptions(TYPE.DEFAULT, {\n      isLoading: true,\n      autoClose: false,\n      closeOnClick: false,\n      closeButton: false,\n      draggable: false,\n      ...options\n    })\n  );\n\nexport interface ToastPromiseParams<T = unknown> {\n  pending?: string | UpdateOptions<void>;\n  success?: string | UpdateOptions<T>;\n  error?: string | UpdateOptions<any>;\n}\n\nfunction handlePromise<T = unknown>(\n  promise: Promise<T> | (() => Promise<T>),\n  { pending, error, success }: ToastPromiseParams<T>,\n  options?: ToastOptions\n) {\n  let id: Id;\n\n  if (pending) {\n    id = isStr(pending)\n      ? toast.loading(pending, options)\n      : toast.loading(pending.render, {\n          ...options,\n          ...(pending as ToastOptions)\n        });\n  }\n\n  const resetParams = {\n    isLoading: null,\n    autoClose: null,\n    closeOnClick: null,\n    closeButton: null,\n    draggable: null,\n    delay: 100\n  };\n\n  const resolver = (\n    type: TypeOptions,\n    input: string | UpdateOptions<T> | undefined,\n    result: T\n  ) => {\n    // Remove the toast if the input has not been provided. This prevents the toast from hanging\n    // in the pending state if a success/error toast has not been provided.\n    if (input == null) {\n      toast.dismiss(id);\n      return;\n    }\n\n    const baseParams = {\n      type,\n      ...resetParams,\n      ...options,\n      data: result\n    };\n    const params = isStr(input) ? { render: input } : input;\n\n    // if the id is set we know that it's an update\n    if (id) {\n      toast.update(id, {\n        ...baseParams,\n        ...params\n      });\n    } else {\n      // using toast.promise without loading\n      toast(params.render, {\n        ...baseParams,\n        ...params\n      } as ToastOptions);\n    }\n\n    return result;\n  };\n\n  const p = isFn(promise) ? promise() : promise;\n\n  //call the resolvers only when needed\n  p.then(result => resolver('success', success, result)).catch(err =>\n    resolver('error', error, err)\n  );\n\n  return p;\n}\n\ntoast.promise = handlePromise;\ntoast.success = createToastByType(TYPE.SUCCESS);\ntoast.info = createToastByType(TYPE.INFO);\ntoast.error = createToastByType(TYPE.ERROR);\ntoast.warning = createToastByType(TYPE.WARNING);\ntoast.warn = toast.warning;\ntoast.dark = (content: ToastContent, options?: ToastOptions) =>\n  dispatchToast(\n    content,\n    mergeOptions(TYPE.DEFAULT, {\n      theme: 'dark',\n      ...options\n    })\n  );\n\n/**\n * Remove toast programmaticaly\n */\ntoast.dismiss = (id?: Id) => {\n  if (containers.size > 0) {\n    eventManager.emit(Event.Clear, id);\n  } else {\n    queue = queue.filter(t => isToastIdValid(id) && t.options.toastId !== id);\n  }\n};\n\n/**\n * Clear waiting queue when limit is used\n */\ntoast.clearWaitingQueue = (params: ClearWaitingQueueParams = {}) =>\n  eventManager.emit(Event.ClearWaitingQueue, params);\n\n/**\n * return true if one container is displaying the toast\n */\ntoast.isActive = (id: Id) => {\n  let isToastActive = false;\n\n  containers.forEach(container => {\n    if (container.isToastActive && container.isToastActive(id)) {\n      isToastActive = true;\n    }\n  });\n\n  return isToastActive;\n};\n\ntoast.update = (toastId: Id, options: UpdateOptions = {}) => {\n  // if you call toast and toast.update directly nothing will be displayed\n  // this is why I defered the update\n  setTimeout(() => {\n    const toast = getToast(toastId, options as ToastOptions);\n    if (toast) {\n      const { props: oldOptions, content: oldContent } = toast;\n\n      const nextOptions = {\n        ...oldOptions,\n        ...options,\n        toastId: options.toastId || toastId,\n        updateId: generateToastId()\n      } as ToastProps & UpdateOptions;\n\n      if (nextOptions.toastId !== toastId) nextOptions.staleId = toastId;\n\n      const content = nextOptions.render || oldContent;\n      delete nextOptions.render;\n\n      dispatchToast(content, nextOptions);\n    }\n  }, 0);\n};\n\n/**\n * Used for controlled progress bar.\n */\ntoast.done = (id: Id) => {\n  toast.update(id, {\n    progress: 1\n  });\n};\n\n/**\n * Subscribe to change when a toast is added, removed and updated\n *\n * Usage:\n * ```\n * const unsubscribe = toast.onChange((payload) => {\n *   switch (payload.status) {\n *   case \"added\":\n *     // new toast added\n *     break;\n *   case \"updated\":\n *     // toast updated\n *     break;\n *   case \"removed\":\n *     // toast has been removed\n *     break;\n *   }\n * })\n * ```\n */\ntoast.onChange = (callback: OnChangeCallback) => {\n  eventManager.on(Event.Change, callback);\n  return () => {\n    eventManager.off(Event.Change, callback);\n  };\n};\n\ntoast.POSITION = POSITION;\ntoast.TYPE = TYPE;\n\n/**\n * Wait until the ToastContainer is mounted to dispatch the toast\n * and attach isActive method\n */\neventManager\n  .on(Event.DidMount, (containerInstance: ContainerInstance) => {\n    latestInstance = containerInstance.containerId || containerInstance;\n    containers.set(latestInstance, containerInstance);\n\n    queue.forEach(item => {\n      eventManager.emit(Event.Show, item.content, item.options);\n    });\n\n    queue = [];\n  })\n  .on(Event.WillUnmount, (containerInstance: ContainerInstance) => {\n    containers.delete(containerInstance.containerId || containerInstance);\n\n    if (containers.size === 0) {\n      eventManager\n        .off(Event.Show)\n        .off(Event.Clear)\n        .off(Event.ClearWaitingQueue);\n    }\n  });\n\nexport { toast };\n"]},"metadata":{},"sourceType":"module"}